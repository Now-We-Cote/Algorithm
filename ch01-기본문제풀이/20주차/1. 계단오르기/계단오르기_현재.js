{
  // 동적 계획법
  // 아주 작은 답을 첫답으로 저장한다
  // 점화식처럼 답을 조금씩 키워나간다
  // dy[n] = dy[n-1] + 3 <- 이런식의 관계가 있는 것
  // 동적 계획법은 끼다로운 문제. 많이 풀어봐야한다
  // 문제 접근 법
  // 우선 7번째 칸을 다 보지 않고, 첫번쨰 계단까지 접근 가능한 방법의 수 확인.
  // 그 후, 두번쨰 계딘까지 접근 가능한 방법 확인 ...
  // 직관적으로 알 수 있는 부분은 초기화한다 (1, 2번 계단)
  // 3번 계단은 1번 계단까지 온 후의 경우의 수, 2번계단까지 온 후의 경우의 수 이렇게 2가지로 존재. -> 1번 게단까지 경우의 수 + 2번 계단까지 경우의 수 (앞의 2개를 더하면 경우의 수가 완성)

  const solution = (n) => {
    let answer = 0;
    let dy = Array.from({ length: n + 1 }, () => 0);
    dy[1] = 1;
    dy[2] = 2; // 이렇게 두개 초기화 시킨다 - 경우의 수가 2칸 까지니까
    for (let i = 3; i <= n; i++) {
      dy[i] = dy[i - 2] + dy[i - 1];
    }

    answer = dy[7];
    return answer;
  };

  solution(7);
}
